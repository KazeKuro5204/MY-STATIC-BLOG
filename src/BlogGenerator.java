import java.io.*;
import java.nio.file.*;
import java.util.*;

public class BlogGenerator {
    public static void main(String[] args) throws IOException {
        List<Post> posts = List.of(
            new Post("L·∫≠p tr√¨nh socket trong Java", "H∆∞·ªõng d·∫´n t·∫°o socket server-client b·∫±ng Java.", "<p>N·ªôi dung chi ti·∫øt v·ªÅ Socket trong Java...</p>", "Java", "lap-trinh-socket-trong-java"),
            new Post("Giao ti·∫øp TCP/IP v·ªõi Server", "T·ªïng quan TCP/IP v√† c√°ch ·ª©ng d·ª•ng.", "<p>N·ªôi dung chi ti·∫øt v·ªÅ TCP/IP...</p>", "Java", "giao-tiep-tcp-ip"),
            new Post("ƒê·ªçc/Ghi file trong Java", "C√°c ph∆∞∆°ng ph√°p x·ª≠ l√Ω file trong Java.", "<p>N·ªôi dung chi ti·∫øt v·ªÅ file I/O...</p>", "Java", "doc-ghi-file-trong-java"),
            new Post("Fetch API trong JavaScript", "S·ª≠ d·ª•ng Fetch ƒë·ªÉ g·ªçi API.", "<p>N·ªôi dung chi ti·∫øt v·ªÅ Fetch...</p>", "JavaScript", "fetch-api-trong-js"),
            new Post("Promise & Async/Await", "Qu·∫£n l√Ω b·∫•t ƒë·ªìng b·ªô trong JS.", "<p>N·ªôi dung chi ti·∫øt v·ªÅ Promise...</p>", "JavaScript", "promise-async-await"),
            new Post("X·ª≠ l√Ω s·ª± ki·ªán trong DOM", "Event handling c∆° b·∫£n v√† n√¢ng cao.", "<p>N·ªôi dung chi ti·∫øt v·ªÅ DOM events...</p>", "JavaScript", "xu-ly-su-kien-dom"),
            new Post("K·∫øt n·ªëi Backend & Frontend", "C√°ch k·∫øt n·ªëi REST API v·ªõi frontend.", "<p>N·ªôi dung chi ti·∫øt v·ªÅ k·∫øt n·ªëi...</p>", "Fullstack", "ket-noi-backend-frontend"),
            new Post("RESTful API l√† g√¨?", "Nguy√™n t·∫Øc x√¢y d·ª±ng RESTful.", "<p>N·ªôi dung chi ti·∫øt v·ªÅ REST...</p>", "Backend", "restful-api-la-gi"),
            new Post("Kinh nghi·ªám h·ªçc l·∫≠p tr√¨nh m·∫°ng", "Tips & best practices khi h·ªçc m·∫°ng.", "<p>N·ªôi dung chia s·∫ª kinh nghi·ªám...</p>", "General", "kinh-nghiem-hoc-lap-trinh-mang")
        );

        Path outDir = Paths.get("output");
        Path postsDir = outDir.resolve("posts");
        Files.createDirectories(postsDir);

        String homeTemplate = readTemplate("templates/home.html");
        String blogTemplate = readTemplate("templates/blog.html");
        String postTemplate = readTemplate("templates/post-template.html");

        for (Post p : posts) {
            String single = postTemplate
                .replace("%%TITLE%%", escapeHtml(p.getTitle()))
                .replace("%%CATEGORY%%", escapeHtml(p.getCategory()))
                .replace("%%CONTENT%%", p.getContent());
            Files.writeString(postsDir.resolve(p.getSlug() + ".html"), single);
        }

        StringBuilder cards = new StringBuilder();
        for (Post p : posts) {
            cards.append(String.format(
                "<div class='col-md-4 mb-4'>\n" +
                "  <div class='card p-3 h-100 shadow-sm'>\n" +
                "    <h5>%s</h5>\n" +
                "    <p>%s</p>\n" +
                "    <span class='badge bg-secondary'>%s</span><br><br>\n" +
                "    <a href='posts/%s.html' class='btn btn-sm btn-outline-primary'>ƒê·ªçc ti·∫øp</a>\n" +
                "  </div>\n</div>\n",
                escapeHtml(p.getTitle()), escapeHtml(p.getSummary()), escapeHtml(p.getCategory()), p.getSlug()
            ));
        }
        String blogPage = blogTemplate.replace("<!--POST_CARDS-->", cards.toString());
        Files.writeString(outDir.resolve("blog.html"), blogPage);

        String homeContent = "<h1>üëã Xin ch√†o, m√¨nh l√† KazeKuro</h1>\n" +
                             "<p class='lead'>M√¨nh l√† sinh vi√™n y√™u th√≠ch l·∫≠p tr√¨nh m·∫°ng, Java & JavaScript. ƒê√¢y l√† blog chia s·∫ª ki·∫øn th·ª©c c√° nh√¢n.</p>\n" +
                             "<a class='btn btn-primary' href='blog.html'>ƒê·ªçc blog</a>";
        String homePage = homeTemplate.replace("<!--HOME_CONTENT-->", homeContent);
        Files.writeString(outDir.resolve("index.html"), homePage);

        System.out.println("‚úÖ Blog static ƒë√£ t·∫°o trong th∆∞ m·ª•c 'output'");
    }

    private static String readTemplate(String path) throws IOException {
        return Files.readString(Paths.get(path));
    }

    private static String escapeHtml(String s) {
        return s.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;").replace("\"", "&quot;");
    }
}
